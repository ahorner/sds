/*Projectile.asCreated by: Andrew HornerContents:Projectile defines a projectile object (typically created through an AttackEvent). It contains a method which dispatches a MovementEvent on each frame in order to continually update its position. This class may be extended, and the everyFrame function overridden in order to define more advanced trajectories for the projectile than the default "continue in a straight line" behavior .*/package character{		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;		public class Projectile extends MovieClip	{				protected var _dX:Number = 0;		protected var _dY:Number = 0;		protected var _power:Number = 0;		protected var _knockback:Number = 0;		protected var _attackSource:DisplayObject;				/**********************************************		Constructor method		**********************************************/		public function Projectile():void		{			stop();			this.addEventListener(Event.ADDED, addHandler);		}						/**********************************************		The following define public methods of the 		Projectile class.		**********************************************/				/**********************************************		Getters and Setters		**********************************************/		public function get dX():Number		{			return _dX;		}				public function set dX(deltaX:Number):void		{			_dX = deltaX;		}				public function get dY():Number		{			return _dY;		}				public function set dY(deltaY:Number):void		{			_dY = deltaY;		}				public function get power():Number		{			return _power;		}				public function set power(newPower:Number):void		{			_power = newPower;		}				public function get knockback():Number		{			return _knockback;		}				public function set knockback(newKnockback:Number):void		{			_knockback = newKnockback;		}				public function get attackSource():DisplayObject		{			return _attackSource;		}				public function set attackSource(newSource:DisplayObject):void		{			_attackSource = newSource;		}		/**********************************************		**********************************************/				/**********************************************		The following define private methods of the 		Projectile class.		**********************************************/				/*		Pre:	e is a reference to an Event.ADDED event		Post:	The ADDED listener is removed, and handlers for ENTER_FRAME and REMOVED				events are added		*/		protected function addHandler(e:Event):void		{			if (e.target == this)			{				this.gotoAndPlay("animation");				this.removeEventListener(Event.ADDED, addHandler);				this.addEventListener(Event.ENTER_FRAME, everyFrame);				this.addEventListener(Event.REMOVED, removeHandler);			}		}				/*		Pre:	e is a reference to an Event.REMOVED event		Post:	The current event listeners are removed from the projectile in order to 				clear up memory for garbage collection		*/		protected function removeHandler(e:Event):void		{			if (e.target == this)			{				this.removeEventListener(Event.ENTER_FRAME, everyFrame);				this.removeEventListener(Event.REMOVED, removeHandler);			}		}				/*		Pre:	e is a reference to an Event.ENTER_FRAME event		Post:	The projectile dispatches a movement event in order to continue its trajectory		*/		protected function everyFrame(e:Event):void		{			var moveRequest:MovementEvent = new MovementEvent(this, this.x + _dX, this.y + _dY);			this.dispatchEvent(moveRequest);		}		/**********************************************		**********************************************/	}	}