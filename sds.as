package{		import character.*;	import map.*;	import menu.*;	import hud.*;	import item.*;	import sound.*;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.TimerEvent;	import flash.display.MovieClip;	import flash.utils.getDefinitionByName;	import flash.utils.Timer;		public class sds extends MovieClip	{		//Variables used to track game and HUD elements		protected var hero:Hero = new Hero();		protected var discChanger:DiscChanger = new DiscChanger();		protected var currentLevel:String = "";		protected var levelMap:LevelMap;		protected var levelCam:LevelCamera = new LevelCamera();		protected var bgMusic:BackgroundMusic = new BackgroundMusic("LastPromise");		protected var musicListing:TextDisplay = new TextDisplay("LastPromise");				protected var eventList:Array = new Array();		protected var displayScene:CutScene;				//Variables used to track the character's current buffs while playing		protected var buffList:Array = new Array();		protected var buffTimers:Array = new Array();		protected var buffEffects:Array = new Array();		protected var buffDisplays:Array = new Array();		protected var buffMeters:Array = new Array();		protected var buffSlots:Array = new Array(true, true, true, true);				/**********************************************		Main constructor method		**********************************************/		public function sds():void		{			this.addEventListener(Event.ADDED_TO_STAGE, addHandler);		}				/**********************************************		The following define private methods of the 		main sds class.		**********************************************/				/*		Pre:	e is a reference to an Event.ADDED_TO_STAGE event		Post:	Initializes the game content, after a working reference to the stage has been guaranteed.		*/		protected function addHandler(e:Event)		{			this.removeEventListener(Event.ADDED_TO_STAGE, addHandler);			this.addEventListener("selectEvent", selectHandler);						var openingScreen:StartMenu = new startMenu();			stage.addEventListener(KeyboardEvent.KEY_DOWN, openingScreen.keyHandler);			this.addChild(openingScreen);		}				/*		Pre:	e is a reference to a SelectionEvent event		Post:	Determines what actions to take based on which menu the event originated from.		*/		protected function selectHandler(e:SelectionEvent):void		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN, e.target.keyHandler);			this.removeChild(e.target as MovieClip);						if (e.target is StartMenu)			{				var genderSelection:GenderSelect = new genderSelect();				this.addChild(genderSelection);				stage.addEventListener(KeyboardEvent.KEY_DOWN, genderSelection.keyHandler);			}			else if (e.target is GenderSelect)			{				setUpHero(e.selection);			}			else if (e.target is PauseMenu)			{				resumeGame();			}		}				/*		Pre:	chosenGender is a string containing the hero's selected gender ("boy" or "girl").		Post:	Instantiates the main character, as well as the related HUD elements		*/		protected function setUpHero(chosenGender:String):void		{						hero.gender = chosenGender;						hero.addGenre("none");			var newGenre:Genre = initializeGenre("techno");			hero.addGenre(newGenre);			newGenre = initializeGenre("pop");			hero.addGenre(newGenre);			newGenre = initializeGenre("classical");			hero.addGenre(newGenre);			newGenre = initializeGenre("metal");			hero.addGenre(newGenre);			newGenre = initializeGenre("jazz");			hero.addGenre(newGenre);			hero.changeGenre("none");						//Establish the valid keyboard commands for the player character			var heroKeys:Array = new Array();			heroKeys["left"] = 37;			heroKeys["right"] = 39;			heroKeys["jump"] = 38;			heroKeys["crouch"] = 40;			heroKeys["attack"] = 32;			heroKeys["basic"] = 67;			heroKeys["intermediate"] = 88;			heroKeys["advanced"] = 90;			hero.addCommands(heroKeys);						//Establish the valid keyboard commands for the disc changer			var changerKeys:Array = new Array();			changerKeys["previous"] = 37;			changerKeys["next"] = 39;			changerKeys["back"] = 38;			changerKeys["forward"] = 40;			discChanger.addCommands(changerKeys);						//Adds one disc of each genre for testing purposes			var discOne:Disc = Disc.makeDisc("techno", "AlchemyFX");			var discTwo:Disc = Disc.makeDisc("metal", "DestructivePaths");			var discThree:Disc = Disc.makeDisc("jazz", "Jazzy");			var discFour:Disc = Disc.makeDisc("classical", "RoyalExecution");			var discFive:Disc = Disc.makeDisc("pop", "StardustCrazy");			discChanger.addDisc(discOne);			discChanger.addDisc(discTwo);			discChanger.addDisc(discFour);			discChanger.addDisc(discThree);			discChanger.addDisc(discFive);						startLevel("serene");		}					/*		Pre: 	levelName is the name of a valid level in the game		Post:	Initializes the level map, adding the hud elements and attaching keyboard event listeners.		*/		protected function startLevel(levelName:String):void		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);						this.addChild(levelCam); 			createLevel(levelName);			//var frViewer:FrameRateViewer = new FrameRateViewer();			//stage.addChild(frViewer);						musicListing.x = 20;			musicListing.y = stage.stageHeight - 90;			this.addChild(musicListing);						discChanger.x = stage.stageWidth - 100;			discChanger.y = stage.stageHeight - 50;			this.addChild(discChanger);			discChanger.addEventListener("changerEvent", genreChangeHandler);						var volumeMeter:VolumeMeter = new volMeter();			volumeMeter.target = hero;			volumeMeter.x = 20;			volumeMeter.y = 20;			this.addChild(volumeMeter);		}				/*		Pre:	None		Post:	Handles KEY_DOWN events appropriately by delegating the events out to the appropriate in-game handlers		*/		protected function keyDownHandler(e:KeyboardEvent)		{			if (e.keyCode == 13)				pauseGame();			else if (!e.shiftKey)				hero.keyDownHandler(e);			else				discChanger.keyHandler(e);		}				/*		Pre:	None		Post:	Handles KEY_UP events appropriately by delegating the events out to the appropriate in-game handlers		*/		protected function keyUpHandler(e:KeyboardEvent)		{			hero.keyUpHandler(e);		}				/*		Pre:	None		Post:			*/		protected function pauseGame():void		{			levelMap.pauseGame();			levelCam.pauseGame();			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			var pauseScreen:PauseMenu = new pauseMenu();			stage.addEventListener(KeyboardEvent.KEY_DOWN, pauseScreen.keyHandler);			this.addChild(pauseScreen);			var pauseSound:SoundEffect = new SoundEffect("bellSound");		}				/*		Pre:	None		Post:			*/		protected function resumeGame():void		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			levelMap.resumeGame();			levelCam.resumeGame();		}				/*		Pre:	genreName is the name of a valid genre in the game.		Post:	Returns an instance of the appropriate genre clip based on the character's gender, with the appropriate				beginning skill added to the Genre class instance.		*/		protected function initializeGenre(genreName:String):Genre		{			var genre:Genre = new (Class(getDefinitionByName(genreName+hero.gender)))();						var basicSkill:Skill = new Skill("attack");						switch(genreName)			{				case "none":					break;				case "pop":					basicSkill.addSegment(Skill.makeSkillSegment(4, 0, 0, new Array(0, 0, 0, 0)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(86, -123, 156, -33)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(122, -203, 182, -93)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(108, -290, 198, -170)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(139, -181, 219, -101)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(49, -345, 179, -175)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(17, -378, 169, -235)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, 45, new Array(-14, -413, 96, -303)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-91, -387, 6, -293)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-174, -370, -64, -300)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-177, -327, -77, -237)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-186, -280, -96, -150)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-195, -228, -86, -80)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-158, -180, -56, -59)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 5, -45, new Array(-136, -134, -20, -30)));					basicSkill.addSegment(Skill.makeSkillSegment(3, 0, 0, new Array(0, 0, 0, 0)));					genre.addSkill(basicSkill);					genre.defense = 4;					break;				case "metal":					basicSkill.addSegment(Skill.makeSkillSegment(11, 0, 0, new Array(0, 0, 0, 0)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 12, 50, new Array(15, -285, 75, -205)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 12, 50, new Array(70, -225, 135, -135)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 12, 50, new Array(110, -135, 190, -65)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 12, 50, new Array(145, -50, 225, -17)));					basicSkill.addSegment(Skill.makeSkillSegment(6, 0, 0, new Array(0, 0, 0, 0)));					genre.addSkill(basicSkill);					genre.defense = 3;					break;				case "techno":					basicSkill.addSegment(Skill.makeSkillSegment(4, 2, 50, new Array(0, -125, 25, -112)));					basicSkill.addSegment(Skill.makeSkillSegment(5, 2, 20, new Array(210, -130, 235, -87)));					basicSkill.addSegment(Skill.makeSkillSegment(4, 2, 50, new Array(0, -125, 25, -112)));					genre.addSkill(basicSkill);					genre.walkSpeed *= 2;					genre.jumpHeight *= 1.2;					genre.defense = 1;					break;				case "jazz":					basicSkill.addSegment(Skill.makeSkillSegment(9, 0, 0, new Array(0, 0, 0, 0)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 70), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 90), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 110), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 130), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 150), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 150), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 130), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 110), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 90), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(1, 3, 30, new Array(0, -109, 70), "hitRadius"));					basicSkill.addSegment(Skill.makeSkillSegment(9, 0, 0, new Array(0, 0, 0, 0)));					genre.addSkill(basicSkill);					genre.defense = 8;					break;				case "classical":					basicSkill.addSegment(Skill.makeSkillSegment(8, 0, 0, new Array(0, 0, 0, 0)));					basicSkill.addSegment(Skill.makeSkillSegment(1, 7, 75, new Array(105, -275, 20, 0, "magicBullet"), "hitBullet"));					basicSkill.addSegment(Skill.makeSkillSegment(7, 0, 0, new Array(0, 0, 0, 0)));					genre.addSkill(basicSkill);					genre.walkSpeed *= 1.5;					genre.defense = 2;					break;				default:					break;			}			return genre;		}				/*		Pre:	e is a ChangerEvent containing a description of the genre that the disc changer is currently displaying		Post:	Forces the player character to change to the relevant genre.		*/		protected function genreChangeHandler(e:ChangerEvent)		{			if (hero.curGenre != e.genre)				hero.changeGenre(e.genre);			clearBuffs();			bgMusic.crossFade(e.track);			musicListing.text = e.track;						}					/*		Pre:	e is an ItemEvent containing a description of an item that the hero has grabbed		Post:	Handles the grab event appropriately, applying buffs, new skills, and new transformations as needed.		*/		protected function grabHandler(e:ItemEvent):void		{			if (e.itemObj is Disc)			{				var discSound:SoundEffect = new SoundEffect("energyChime");				//handle Disc grabbing			}			else if (e.itemObj is PowerUp)			{				var powerUpSound:SoundEffect				var effectName:String = (e.itemObj as PowerUp).effectType;				var buffEffect = (e.itemObj as PowerUp).effectPower;								if (effectName == "health")				{					powerUpSound = new SoundEffect("powerUp");					hero.health += buffEffect;					return;				}								powerUpSound = new SoundEffect("superPower"); 								var buffIndex:Number = buffList.indexOf(effectName);				if (buffIndex == -1)				{					var buffTimer:Timer = new Timer((e.itemObj as PowerUp).duration * 1000);					var buffDisplay:MovieClip;					buffTimer.addEventListener(TimerEvent.TIMER, buffHandler);					buffTimer.start();										var color:uint;					if (effectName == "attack")					{						buffDisplay = new attackPlus();						hero.attack *= buffEffect;						color = 0xFF0000;					}					else if (effectName == "defense")					{						buffDisplay = new defensePlus();						hero.defense *= buffEffect;						color = 0x0000FF;					}					else if (effectName == "speed")					{						buffDisplay = new speedPlus();						hero.walkSpeed *= buffEffect;						color = 0xFFFF00;					}										hero.addChildAt(buffDisplay, 0);					var buffMeter:BuffMeter = new BuffMeter(buffTimer, color);					for (var buffSlot:Number = 0; buffSlot < buffSlots.length; buffSlot++)					{						if (buffSlots[buffSlot])						{							buffIndex = buffSlot;							buffSlots[buffSlot] = false;							break;						}					}										buffMeter.x = stage.stageWidth - (45 * (buffIndex + 1))					buffMeter.y = 10;					stage.addChild(buffMeter);					buffDisplay.alpha = 0.65;										buffDisplays[buffIndex] = buffDisplay;					buffMeters[buffIndex] = buffMeter;					buffList[buffIndex] = effectName;					buffTimers[buffIndex] = buffTimer;					buffEffects[buffIndex] = buffEffect;				}				else				{					buffMeters[buffIndex].reset();					buffTimers[buffIndex].reset();					buffTimers[buffIndex].start();				}			}		}				/*		Pre:	e is a TimerEvent.TIMER event tied to the expiration time of a buff.		Post:	Removes the relevant buff from the hero, and removes the HUD elements associated with it.		*/		protected function buffHandler(e:TimerEvent):void		{			e.target.stop();			e.target.removeEventListener(TimerEvent.TIMER, buffHandler);						var buffIndex:Number = buffTimers.indexOf(e.target);			var effectName:String = buffList[buffIndex];			var buffEffect:Number = buffEffects[buffIndex];						hero.removeChild(buffDisplays[buffIndex]);			stage.removeChild(buffMeters[buffIndex]);			buffSlots[buffIndex] = true;			buffTimers[buffIndex] = null;			buffDisplays[buffIndex] = null;			buffEffects[buffIndex] = null;			buffList[buffIndex] = null;			buffMeters[buffIndex] = null;							switch(effectName)			{				case "attack":					hero.attack /= buffEffect;					break;				case "defense":					hero.defense /= buffEffect;					break;				case "speed":					hero.walkSpeed /= buffEffect;			}					}				/*		Pre:	None		Post:	Deactivates all active buffs (used when changing genres, in order to clear the buffs and eliminate 				the possibility of debuffing an unbuffed genre).		*/		protected function clearBuffs():void		{			for (var buffIndex:uint = 0; buffIndex < buffSlots.length; buffIndex++)			{				if (!buffSlots[buffIndex])				{					hero.removeChild(buffDisplays[buffIndex]);					stage.removeChild(buffMeters[buffIndex]);					buffSlots[buffIndex] = true;					buffTimers[buffIndex].stop();					buffTimers[buffIndex].removeEventListener(TimerEvent.TIMER, buffHandler);					buffTimers[buffIndex] = null;					buffEffects[buffIndex] = null;					buffDisplays[buffIndex] = null;					buffList[buffIndex] = null;					buffMeters[buffIndex] = null;				}			}		}				/*		Pre:	levelName is a valid reference to the name of a level in the game.		Post:	Creates an instance of the relevant level map, placing the player character and all enemies appropriately.		*/		protected function createLevel(levelName:String)		{			if (levelMap)			{				if (levelMap.hasEventListener("grabEvent"))					levelMap.removeEventListener("grabEvent", this.grabHandler);				if (levelMap.hasEventListener("levelEvent"))					levelMap.removeEventListener("levelEvent", this.levelHandler);			}						currentLevel = levelName;						switch(currentLevel)			{				case "serene":					levelMap = new LevelMap(new Array(new levelOne(), new levelOne(), new levelOne(), new levelOne()));					setUpLevel(4, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 6, .5);					break;				case "placid":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "tranquil":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "forgotten":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "abandoned":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "ominous":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "forbidding":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "menacing":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "sinister":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "dire":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "turbulent":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "perilous":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "hostile":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "noxious":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "wretched":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;				case "tragic":					levelMap = new LevelMap(new Array(new levelOne()));					setUpLevel(1, new Array(stage.stageWidth/2, 20), new Array(new Array(1, "legLacuna"), new Array(.2, "armLacuna")), 3, .5);					break;			}		}				/*		Pre:	heroCoords is an array containing the desired starting position of the hero on the level map;				spawnList is an array containing the names and desired spawn probabilities of the monsters in the level;				spawnCapacity is the number of enemies maximum that you want to spawn at one time on the map;				spawnRate is the desired number of seconds between monster spawns on the map.		Post:	Sets up the level with the appropriate settings, and adds it to the stage.		*/		protected function setUpLevel(eventCount:int, heroCoords:Array, spawnList:Array, spawnCapacity:Number, spawnRate:Number)		{			eventList = new Array();			for (var i = 0; i < eventCount; i++)				eventList.push(false);							hero.x = heroCoords[0];			hero.y = heroCoords[1];			levelMap.addCharacter(hero, true);						levelCam.bgMap = levelMap;			levelCam.focus = hero;						levelMap.addEventListener("grabEvent", this.grabHandler);			levelMap.addEventListener("levelEvent", this.levelHandler);			levelMap.spawnList = spawnList;			levelMap.spawnCapacity = spawnCapacity;			levelMap.spawnRate = spawnRate;			levelMap.startSpawn();		}				/*		Pre:	e is a reference to a LevelEvent event thrown by the current level map		Post:	Generates events, changes spawn rates, and otherwise changes the game depending on the area entered by 				the character.		*/		protected function levelHandler(e:LevelEvent):void		{			if (!eventList[e.newArea])			{				eventList[e.newArea] = true;				/*if (e.newArea == 2)				{					cutScene(new enemyAppearanceOne());				}*/			}			//e.target.trapTile(e.newArea - 1);		}				protected function cutScene(sceneMovie:CutScene)		{			displayScene = sceneMovie;			levelMap.pauseMonsters();			hero.resumeCharacter();			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			levelCam.panCamera(10, hero.x - 200);			levelCam.addEventListener(Event.COMPLETE, startSceneHandler);		}				protected function startSceneHandler(e:Event):void		{			levelCam.removeEventListener(Event.COMPLETE, startSceneHandler);			levelCam.pauseGame();			displayScene.addEventListener(Event.COMPLETE, endSceneHandler);			stage.addChild(displayScene);			trace("startedCutScene");		}				protected function endSceneHandler(e:Event):void		{			displayScene.removeEventListener(Event.COMPLETE, endSceneHandler);			stage.removeChild(displayScene);			levelCam.resumeGame();			levelCam.panCamera(10, hero.x - 200);			levelCam.addEventListener(Event.COMPLETE, finishSceneHandler);			trace("finishedCutScene");		}					protected function finishSceneHandler(e:Event):void		{			levelMap.resumeMonsters();			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);		}		/**********************************************		**********************************************/	}	}