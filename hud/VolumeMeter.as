/*VolumeMeter.asCreated by: Andrew HornerContents:VolumeMeter defines an HUD element which displays a representation of the player's current health. The player's health isrepresented in a series of ten-pixel blocks, each pixel of which represents one point of health, and the number of blocksgoing up to ten (or maybe eleven, in some instances!).*/package hud{		import character.Character;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.Event;		public class VolumeMeter extends MovieClip	{				protected var _target:Character;		protected var squareList:Array = new Array();				/**********************************************		Constructor method		**********************************************/		public function VolumeMeter():void		{			super();			this.addEventListener(Event.ADDED, addHandler);		}				/**********************************************		The following define public methods of the 		VolumeMeter class.		**********************************************/				/**********************************************		Getters and Setters		**********************************************/		public function set target(newTarget:Character):void		{			_target = newTarget;		}		/**********************************************		**********************************************/				/**********************************************		The following define private methods of the 		VolumeMeter class.		**********************************************/				/*		Pre:	e is an Event.ADDED event		Post:	The listener for this handler is removed, and listeners for ENTER_FRAME and REMOVED				events are added.		*/		protected function addHandler(e:Event):void		{			this.removeEventListener(Event.ADDED, addHandler);			this.addEventListener(Event.ENTER_FRAME, everyFrame);			this.addEventListener(Event.REMOVED, removeHandler);		}				/*		Pre:	e is an Event.REMOVED event		Post:	The listeners for this handler and the ENTER_FRAME handler are removed, and a listener for				the ADDED handler is attached.		*/		protected function removeHandler(e:Event):void		{			if (e.target == this)			{				this.removeEventListener(Event.REMOVED, removeHandler);				this.removeEventListener(Event.ENTER_FRAME, everyFrame);				this.addEventListener(Event.ADDED, addHandler);			}		}				/*		Pre:	e is an Event.ENTER_FRAME event		Post:	Updates the meter's display to accurately reflect the target's remaining health.		*/		protected function everyFrame(e:Event):void		{			var volumeColor:uint = 0xFFFFFF - (0x001111 * Math.floor(16*(1-_target.health/_target.maxHealth)));			var numSquares:int = _target.health/10;			var square:Shape;						for each (var box in squareList)				this.removeChild(box);						squareList = new Array();						for(var i:int = 0; i < numSquares; i++)			{				square = new Shape();				square.graphics.beginFill(volumeColor);				square.graphics.drawRect(0, 0, 10, 10);				square.x = this.width + 3;				square.y = this.height/2 - 5;				squareList.push(square);				this.addChild(square);			}						if (_target.health > 0)			{				square = new Shape();				square.graphics.beginFill(volumeColor);				square.graphics.drawRect(0, 0, _target.health % 10, 10);				square.x = this.width + 3;				square.y = this.height/2 - 5;				squareList.push(square);				this.addChild(square);			}		}		/**********************************************		**********************************************/	}	}