package hud{		import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.Event;	import flash.utils.getTimer;	import flash.utils.Timer;		public class BuffMeter extends MovieClip	{				protected var _target:Timer;		protected var color:uint;		protected var startTime:Number;		protected var graphicList:Array = new Array();				/**********************************************		Constructor method		**********************************************/		public function BuffMeter(newTarget:Timer, newColor:uint):void		{			super();			color = newColor;			_target = newTarget;			this.addEventListener(Event.ADDED, addHandler);		}				/**********************************************		The following define public methods of the 		BuffMeter class.		**********************************************/				/**********************************************		Getters and Setters		**********************************************/		public function set target(newTarget:Timer):void		{			_target = newTarget;		}		/*********************************************/				/*		Pre: None		Post: Resets the buff meter's initial time.		*/		public function reset():void		{			startTime = getTimer();		}				/**********************************************		**********************************************/				/**********************************************		The following define private methods of the 		BuffMeter class.		**********************************************/				/*		Pre:	e is an Event.ADDED event		Post:	The listener for this handler is removed, and listeners for ENTER_FRAME and REMOVED				events are added.		*/		protected function addHandler(e:Event):void		{			if (e.target == this)			{				startTime = getTimer();				this.removeEventListener(Event.ADDED, addHandler);				this.addEventListener(Event.ENTER_FRAME, everyFrame);				this.addEventListener(Event.REMOVED, removeHandler);			}		}				/*		Pre:	e is an Event.REMOVED event		Post:	The listeners for this handler and the ENTER_FRAME handler are removed, and a listener for				the ADDED handler is attached.		*/		protected function removeHandler(e:Event):void		{			if (e.target == this)			{				this.removeEventListener(Event.REMOVED, removeHandler);				this.removeEventListener(Event.ENTER_FRAME, everyFrame);				this.addEventListener(Event.ADDED, addHandler);			}		}				/*		Pre:	e is an Event.ENTER_FRAME event		Post:	Updates the meter's display to accurately reflect the remaining duration of the buff.		*/		protected function everyFrame(e:Event):void		{			var currentTime = getTimer() - startTime;			var battery:Shape;						for each (var graphic in graphicList)				this.removeChild(graphic);						graphicList = new Array();						battery = new Shape();			battery.graphics.beginFill(color);			battery.graphics.drawRect(-3, 4, 3, 6);			battery.graphics.drawRect(0, 0, 35, 2);			battery.graphics.drawRect(0, 2, 2, 10);			battery.graphics.drawRect(0, 12, 35, 2);			battery.graphics.drawRect(33, 2, 2, 10);			battery.graphics.drawRect(35, 4, 3, 6);			if (currentTime < _target.delay)				battery.graphics.drawRect(3, 3, (1 - currentTime/_target.delay)*29, 8);						this.addChild(battery);			graphicList.push(battery);		}		/**********************************************		**********************************************/	}	}