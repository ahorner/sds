/*DiscChanger.asCreated by: Andrew HornerContents:DiscChanger defines an HUD element which displays the discs currently possessed by the player. Inactive discs in the player's possessionare displayed behind the current disc in a rotating queue, while the active disc is brought to the front of the display, and rotates overtime. The class contains methods for handling keyboard input from the player, and dispatches ChangerEvents to update the game about the discthat is currently playing.*/package hud{		import item.Disc;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.Strong;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.KeyboardEvent;		public class DiscChanger extends MovieClip	{				//Member variables that are used to track and modify the state of the disc changer		protected var curGenre:Array;		protected var curDisc:Disc;		protected var playList:Array = new Array();		protected var commandList:Array = new Array();				//Member variables used to define and track the tweens that are applied to discs		protected var tweens:Array = new Array();		protected var tweenFinishedCount:Number = 0;		protected var duration:Number = .5;		protected var easing = Strong.easeOut;				/**********************************************		Constructor method		**********************************************/		public function DiscChanger():void		{			super();		}				/**********************************************		The following define public methods of the 		DiscChanger class.		**********************************************/				/*		Pre:	commands is an associative array keyed with valid commands for input to the disc changer, 				and valued with the keycodes for those commands.		Post:	The commands in the array are added to the commandList, keyed with the keycade and valued with the command's name.		*/		public function addCommands(commands:Array):void		{			for (var command in commands)				commandList[commands[command]] = command;		}				/*		Pre:	newDisc is a reference to a valid Disc object with a valid genre.		Post:	newDisc is inserted into its own slot in the playlist if it contains a new genre, 				otherwise it is appended to the discs of the same genre within the playlist		*/		public function addDisc(newDisc:Disc):void		{			var matchesGenre:Boolean = false;						newDisc.x = 0;			newDisc.y = 0;						for each (var discSet:Array in playList)				if (newDisc.genre == discSet[0].genre)				{					matchesGenre = true;					newDisc.x = discSet[0].x;					newDisc.y = discSet[0].y;					discSet.unshift(newDisc);					break;				}							if (curDisc)				if (newDisc.genre == curDisc.genre)				{					matchesGenre = true;					newDisc.x = curDisc.x;					newDisc.y = curDisc.y;					curGenre.unshift(newDisc);				}						if (!matchesGenre)			{				playList.push(new Array(newDisc));				this.addChild(newDisc);			}						allocateChanger();						}				/*		Pre:	e is a Keyboard Event containing information about user input.		Post:	the appropriate function is called, to change the character's genre or the active music.		*/		public function keyHandler(e:KeyboardEvent):void		{			var command = e.keyCode;			var shift = e.shiftKey;			if (shift)			{				if (commandList[command] == "previous")					previousGenre();				else if (commandList[command] == "next")					nextGenre();				else if (commandList[command] == "back")					previousDisc();				else if (commandList[command] == "forward")					nextDisc();			}		}		/**********************************************		**********************************************/				/**********************************************		The following define private methods of the 		DiscChanger class.		**********************************************/				/*		Pre:	None		Post:	The various discs currently possessed by the hero are arranged in such a fashion that the				next and previous discs are to the right and left of the current disc, respectively, and 				this pattern continues for all discs in the playlist, with the halfway point being marked by				a wrap-around (making the discs appear as if they are in a ring).		*/		protected function allocateChanger():void		{			var i:int = 0;			if (playList.length > 0)				while(i <= playList.length - i - 1)				{					var scale:Number = (Math.pow(2, i+1))/(Math.pow(3, i+1));					var leftDisc:Disc = playList[i][playList[i].length-1];					this.addChildAt(leftDisc, 0);					tweens.push(new Tween(leftDisc, "x", easing, leftDisc.x, -30*(scale*i+1), duration, true));					tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);					tweens.push(new Tween(leftDisc, "scaleX", easing, leftDisc.scaleX, scale, duration, true));					tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);					tweens.push(new Tween(leftDisc, "scaleY", easing, leftDisc.scaleY, scale, duration, true));					tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);										var rightDisc:Disc = playList[playList.length-i-1][playList[playList.length-i-1].length-1];					this.addChildAt(rightDisc, 0);					tweens.push(new Tween(rightDisc, "x", easing, rightDisc.x, 30*(scale*i+1), duration, true));					tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);					tweens.push(new Tween(rightDisc, "scaleX", easing, rightDisc.scaleX, scale, duration, true));					tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);					tweens.push(new Tween(rightDisc, "scaleY", easing, rightDisc.scaleY, scale, duration, true));					tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);					i++;				}		}				/*		Pre:	Event listeners have been attached to all tweens applied to the discs within the playlist, 				causing them to be repositioned in their new locations.		Post:	Removes event listeners from the tweens that have finished, clearing the tween array when				all tweens are complete, and beginning the spinning animation for the current disc.		*/		protected function tweenHandler(e:TweenEvent):void		{			e.target.removeEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			tweenFinishedCount++;			if (tweenFinishedCount == tweens.length)			{				tweens = new Array();				tweenFinishedCount = 0;				if (curDisc)					curDisc.addEventListener(Event.ENTER_FRAME, spinDisc);			}		}				/*		Pre:	None		Post:	Moves to the genre at the front of the playlist, putting the old genre at the end of the stack.		*/		protected function previousGenre():void		{				if (curDisc)			{				curDisc.removeEventListener(Event.ENTER_FRAME, spinDisc);				curDisc.rotation = 0;				curGenre.push(curDisc);			}			if (curGenre)				playList.push(curGenre);			curGenre = playList.shift();			curDisc = curGenre.pop();			tweens.push(new Tween(curDisc, "x", easing, curDisc.x, 0, duration, true));			tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			tweens.push(new Tween(curDisc, "scaleX", easing, curDisc.scaleX, 1, duration, true));			tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			tweens.push(new Tween(curDisc, "scaleY", easing, curDisc.scaleY, 1, duration, true));			tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			allocateChanger();			this.addChildAt(curDisc, this.numChildren-1);						var genreChange:ChangerEvent = new ChangerEvent(curDisc.genre, curDisc.trackName);			this.dispatchEvent(genreChange);		}				/*		Pre:	None		Post:	Moves to the genre at the end of the playlist, putting the old genre at the front of the stack.		*/		protected function nextGenre():void		{			if (curDisc)			{				curDisc.removeEventListener(Event.ENTER_FRAME, spinDisc);				curDisc.rotation = 0;				curGenre.push(curDisc);			}			if (curGenre)				playList.unshift(curGenre);			curGenre = playList.pop();			curDisc = curGenre.pop();			tweens.push(new Tween(curDisc, "x", easing, curDisc.x, 0, duration, true));			tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			tweens.push(new Tween(curDisc, "scaleX", easing, curDisc.scaleX, 1, duration, true));			tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			tweens.push(new Tween(curDisc, "scaleY", easing, curDisc.scaleY, 1, duration, true));			tweens[tweens.length - 1].addEventListener(TweenEvent.MOTION_FINISH, tweenHandler);			allocateChanger();			this.addChildAt(curDisc, this.numChildren-1);						var genreChange:ChangerEvent = new ChangerEvent(curDisc.genre, curDisc.trackName);			this.dispatchEvent(genreChange);		}				/*		Pre:	None		Post:	Moves to the disc at the top of the current genre playlist, putting the old disc on the bottom of the stack.		*/		protected function previousDisc():void		{			if (curDisc)			{				curDisc.removeEventListener(Event.ENTER_FRAME, spinDisc);				curDisc.rotation = 0;				this.removeChild(curDisc);				curGenre.push(curDisc);				curDisc = curGenre.shift();				this.addChild(curDisc);				curDisc.addEventListener(Event.ENTER_FRAME, spinDisc);								var trackChange:ChangerEvent = new ChangerEvent(curDisc.genre, curDisc.trackName);				this.dispatchEvent(trackChange);			}		}				/*		Pre:	None		Post:	Moves to the disc at the bottom of the current genre playlist, putting the old disc on top of the stack.		*/		protected function nextDisc():void		{			if (curDisc)			{				curDisc.removeEventListener(Event.ENTER_FRAME, spinDisc);				curDisc.rotation = 0;				this.removeChild(curDisc);				curGenre.unshift(curDisc);				curDisc = curGenre.pop();				this.addChild(curDisc);				curDisc.addEventListener(Event.ENTER_FRAME, spinDisc);								var trackChange:ChangerEvent = new ChangerEvent(curDisc.genre, curDisc.trackName);				this.dispatchEvent(trackChange);			}		}				/*		Pre:	e is an ENTER_FRAME event, causing the current disc to update its rotation every frame		Post:	Rotates the currently-playing disc 20 degrees for each frame.		*/		protected function spinDisc(e:Event):void		{			e.target.rotation += 20;		}		/**********************************************		**********************************************/	}	}